<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
// T4 Text Template Transformation autogenerated output file
using System;
using System.Data;
using System.Collections.Generic;
using System.Reflection;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Diagnostics;
using ServiceStack;
using System.Threading;
using System.Globalization;

using ReportPluginFramework.Properties;
using ReportPluginFramework;
using ReportPluginFramework.ReportData;
using ReportPluginFramework.ReportData.TimeSeriesComputedStatistics;
using ReportPluginFramework.ReportData.TimeSeriesData;
using Server.Services.PublishService.ServiceModel.RequestDtos;
using Server.Services.PublishService.ServiceModel.ResponseDtos;
using Server.Services.PublishService.ServiceModel.Dtos;
using Server.Services.PublishService.ServiceModel.Dtos.FieldVisit;
using Server.Services.PublishService.ServiceModel.Dtos.FieldVisit.Enum;

using PerpetuumSoft.Reporting.Components;
using PerpetuumSoft.Reporting.DOM;
using PerpetuumSoft.Reporting.Export.Pdf;
using PerpetuumSoft.Reporting.Export.Csv;
using PerpetuumSoft.Reporting.Export.OpenXML;
using PerpetuumSoft.Reporting.Export.Graph;

using TimeSeriesPoint = ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint;
using InterpolationType = ReportPluginFramework.ReportData.TimeSeriesDescription.InterpolationType;
<#+ 
void PrintFiles(string namespaceName, string folderPath)
{
    var relativePath = Path.Combine(folderPath, @"..\..");
	var anchorFile = @"Reports.Common\Common.cs";
	if (!File.Exists(Path.Combine(relativePath, anchorFile)))
	{
	    relativePath = Path.Combine(folderPath, @"..\..\Custom\src");
		if (!File.Exists(Path.Combine(relativePath, anchorFile)))
		    throw new InvalidOperationException($"Can't find relative path to '{anchorFile}' from '{folderPath}'.");
	}
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, anchorFile));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\DataTablesBuilder.cs"));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\DoubleValueFormatter.cs"));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\GroupByHandler.cs"));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\PointsDataTableBuilder.cs"));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\TimeSeriesTimeRangeFinder.cs"));
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.Common\TimeSeriesInstMinMaxFinder.cs"));	
	PrintFile(namespaceName, Path.Combine(folderPath, relativePath, @"Reports.ReportPluginBase\ReportPluginBase.cs"));
}
void PrintFile(string namespaceName, string filePath)
{
	string fileContent = File.ReadAllText(filePath);
	string [] lines =  fileContent.Replace("\r", "").Split(new[] { "\n" }, StringSplitOptions.None);
	foreach (string line in lines)
	{
		if (line.StartsWith("using")) { continue; }
		if (line.Contains("namespace")) 
		{
#>
<#= "// Copy of shared file: \"" + filePath + "\"" #>
<#= line.Replace("Reports", namespaceName) #>
<#+ } else { #>
<#= line #>
<#+
		}
	}
}
#>