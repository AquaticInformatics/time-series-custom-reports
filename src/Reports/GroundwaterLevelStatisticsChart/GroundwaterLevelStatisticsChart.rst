<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="GroundwaterLevelStatisticsChart" IsTemplate="true" Title="Groundwater Level Statistics Chart" ImportsString="GroundwaterLevelStatisticsChartNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;ReportPluginFramework.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;PerpetuumSoft.Reporting.MSChart&#xD;&#xA;System.Windows.Forms.DataVisualization.Charting" DocumentGuid="e6b2ac65-9fde-4519-8b25-7852380afd34" MetricUnit="Pixel" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public Common CommonLibrary = null;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public string StatusAttribute = &quot;ReportTables.SourceDataLocationExtendedAttributes.STATUS_GW&quot;;&#xD;&#xA;&#xD;&#xA;public DateTimeOffset HistoricalStart = DateTimeOffset.MinValue;&#xD;&#xA;public DateTimeOffset HistoricalEnd = DateTimeOffset.MaxValue;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public bool StatusIsActive = false;&#xD;&#xA;public int ChartYear = 2020;&#xD;&#xA;&#xD;&#xA;void InitReportVariables(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  string status = &quot;INACTIVE&quot;;&#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    status = GetData(StatusAttribute).ToString();&#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;  StatusIsActive = (status.Trim().ToLower() == &quot;active&quot;);&#xD;&#xA;  &#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;    DateTimeOffset lastGroupTime = ((DateTimeOffset) groupBy.Rows[groupBy.Rows.Count - 1][&quot;StartTime&quot;]);&#xD;&#xA;  &#xD;&#xA;    HistoricalStart = lastGroupTime.AddYears(-10);&#xD;&#xA;    HistoricalEnd = lastGroupTime.AddMilliseconds(-1);&#xD;&#xA;    &#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public List&lt;string&gt; GetTimeSeriesPointsApprovalLevelNames(&#xD;&#xA;  List&lt;ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint&gt; points, List&lt;ApprovalTimeRange&gt; approvalRanges)&#xD;&#xA;{&#xD;&#xA;  var pointwiseApprovals = new List&lt;string&gt;();&#xD;&#xA;  var index = 0;&#xD;&#xA;&#xD;&#xA;  foreach (var point in points)&#xD;&#xA;  {&#xD;&#xA;    string approval = &quot;&quot;;&#xD;&#xA;    while (index &lt; approvalRanges.Count &amp;&amp; approvalRanges[index].EndTime &lt;= point.Timestamp) ++index;&#xD;&#xA;    if ((index &lt; approvalRanges.Count) &amp;&amp; (approvalRanges[index].StartTime &lt;= point.Timestamp)) approval = approvalRanges[index].Name;&#xD;&#xA;    pointwiseApprovals.Add(approval);&#xD;&#xA;  }&#xD;&#xA;  return pointwiseApprovals;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetXAxisTitle(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  if (!StatusIsActive) return &quot;&quot;;&#xD;&#xA;&#xD;&#xA;  System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  int numGroups = groupBy.Rows.Count;&#xD;&#xA;  if (numGroups &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow lastGroupRow = groupBy.Rows[numGroups - 1];&#xD;&#xA;    int lastGroupYear = ((DateTimeOffset) lastGroupRow[&quot;StartTime&quot;]).Year;&#xD;&#xA;&#xD;&#xA;    return &quot;Water Year &quot; + lastGroupYear.ToString() + &quot; - &quot; + (lastGroupYear + 1).ToString();&#xD;&#xA;  }&#xD;&#xA;  return &quot;&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public bool MINEXTREMA = true;&#xD;&#xA;public bool MAXEXTREMA = false;&#xD;&#xA;public double GetMinForDay(int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  return GetExtremaForDay(MINEXTREMA, dayIndex, dailyLists);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetMaxForDay(int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  return GetExtremaForDay(MAXEXTREMA, dayIndex, dailyLists);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetExtremaForDay(bool extrema, int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  double extremaForDay = double.NaN;&#xD;&#xA;  int countYear = 0;&#xD;&#xA;&#xD;&#xA;  foreach (List&lt;double&gt; dailyVals in dailyLists[dayIndex])&#xD;&#xA;  {&#xD;&#xA;    int count = 0;&#xD;&#xA;    foreach (double dailyVal in dailyVals)&#xD;&#xA;    {&#xD;&#xA;      if (!double.IsNaN(dailyVal)) count++;&#xD;&#xA;      if (IsExtrema(extrema, dailyVal, extremaForDay)) extremaForDay = dailyVal;&#xD;&#xA;    }&#xD;&#xA;    if (count &gt;= 1) countYear++;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (countYear &gt; 1)&#xD;&#xA;    return extremaForDay;&#xD;&#xA;  else&#xD;&#xA;    return double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool IsExtrema(bool extrema, double dailyVal, double curVal)&#xD;&#xA;{&#xD;&#xA;  if (double.IsNaN(dailyVal)) return false;&#xD;&#xA;  if (double.IsNaN(curVal)) return true;&#xD;&#xA;  if (extrema == MINEXTREMA) return (dailyVal &lt; curVal);&#xD;&#xA;  return (dailyVal &gt; curVal);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double Median = 0.50;&#xD;&#xA;public double Quartile25 = 0.25;&#xD;&#xA;public double Quartile75 = 0.75;&#xD;&#xA;&#xD;&#xA;public double GetQuartileForDay(double quartile, int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  List&lt;double&gt; validValuesForDay = new List&lt;double&gt;();&#xD;&#xA; &#xD;&#xA;  foreach (List&lt;double&gt; dailyVals in dailyLists[dayIndex])&#xD;&#xA;  {        &#xD;&#xA;    List&lt;double&gt; validValuesForDayYear = new List&lt;double&gt;();&#xD;&#xA; &#xD;&#xA;    foreach (double dailyVal in dailyVals)&#xD;&#xA;      if (!double.IsNaN(dailyVal)) validValuesForDayYear.Add(dailyVal);&#xD;&#xA;    &#xD;&#xA;    double averageForDayYear = GetAverageFromList(validValuesForDayYear);&#xD;&#xA;    if (!double.IsNaN(averageForDayYear)) validValuesForDay.Add(averageForDayYear);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  double result = GetQuartileFromList(quartile, validValuesForDay);&#xD;&#xA;  &#xD;&#xA;//  log.DebugFormat(&quot;dayIndex = {0}, quartile = {1}, result = {2}&quot;, dayIndex, quartile, result);&#xD;&#xA;  return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetAverageFromList(List&lt;double&gt; validValuesForDayYear)&#xD;&#xA;{&#xD;&#xA;  if (validValuesForDayYear.Count == 0) return double.NaN;&#xD;&#xA;  &#xD;&#xA;  double total = 0.0;&#xD;&#xA;  foreach (double validValue in validValuesForDayYear) total += validValue; &#xD;&#xA;  return total / (double) validValuesForDayYear.Count;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetQuartileFromList(double quartile, List&lt;double&gt; valuesForDay)&#xD;&#xA;{&#xD;&#xA;  int count = valuesForDay.Count; &#xD;&#xA;  if (count &lt; 2) return double.NaN;&#xD;&#xA;  &#xD;&#xA;  valuesForDay.Sort();&#xD;&#xA;  &#xD;&#xA;  double position = (count - 1) * quartile;&#xD;&#xA;  &#xD;&#xA;  int index = (int) Math.Floor(position);&#xD;&#xA;  double remainder = position - index;&#xD;&#xA;  &#xD;&#xA;  if (remainder == 0.0) return valuesForDay[index];&#xD;&#xA;  &#xD;&#xA;  double leftVal = valuesForDay[index];&#xD;&#xA;  double rightVal = valuesForDay[index + 1];&#xD;&#xA;  &#xD;&#xA;  double interpolate = leftVal + ((rightVal - leftVal) * remainder);&#xD;&#xA;  &#xD;&#xA;  return interpolate;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddDataPoint(Series series, System.Data.DataRow groupPoint)&#xD;&#xA;{&#xD;&#xA;  double value = double.NaN;&#xD;&#xA;  if (groupPoint[&quot;Value&quot;] is double) value = (double) groupPoint[&quot;Value&quot;];&#xD;&#xA;    &#xD;&#xA;  var time = (DateTimeOffset) groupPoint[&quot;Timestamp&quot;];&#xD;&#xA;  var yr = ((time.Month &gt;= 10) &amp;&amp; (time.Month &lt;= 12)) ? ChartYear - 1 : ChartYear;&#xD;&#xA;    &#xD;&#xA;  var chartTime = (new DateTime(yr, time.Month, time.Day, time.Hour, time.Minute, time.Second)).ToOADate();&#xD;&#xA;          &#xD;&#xA;  series.Points.AddXY(chartTime, value);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public void DrawChart(MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  // Set all the chart properties and add the series and points&#xD;&#xA;  //&#xD;&#xA;  //&#xD;&#xA;&#xD;&#xA;  // Script to generate all chart series from timeseries dataset&#xD;&#xA;  //&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.Legends[0].TextWrapThreshold = 100;&#xD;&#xA;  microsoftChart1.Legends[0].LegendItemOrder = LegendItemOrder.SameAsSeriesOrder;    &#xD;&#xA;  microsoftChart1.Legends[0].LegendStyle = LegendStyle.Row;&#xD;&#xA;  microsoftChart1.Legends[0].Docking = Docking.Bottom;&#xD;&#xA;&#xD;&#xA;  ChartArea chartArea = microsoftChart1.ChartAreas[0];&#xD;&#xA;  Axis xAxis = chartArea.AxisX2;&#xD;&#xA;  &#xD;&#xA;  chartArea.AxisY.IsReversed = true;&#xD;&#xA;  chartArea.AxisY.IsStartedFromZero = false;&#xD;&#xA;  chartArea.AxisY.Title = &quot;Water Level Below Ground Surface (&quot; + GetData(&quot;ReportTables.SourceData.UnitSymbol&quot;).ToString() + &quot;)&quot;;&#xD;&#xA;&#xD;&#xA;  if (StatusIsActive)&#xD;&#xA;  {  &#xD;&#xA;    xAxis.LabelStyle.Format = &quot;MMM&quot;;&#xD;&#xA;    xAxis.LabelStyle.ForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.LabelStyle.Font = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;    xAxis.IsMarginVisible = false;&#xD;&#xA;    xAxis.Minimum = (new DateTime(ChartYear - 1, 10, 1)).ToOADate();&#xD;&#xA;    xAxis.Maximum = (new DateTime(ChartYear, 10, 1)).ToOADate();&#xD;&#xA;    xAxis.MajorGrid.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;    xAxis.MajorGrid.Interval = 1.0;&#xD;&#xA;    xAxis.MajorGrid.LineColor = System.Drawing.Color.Silver;&#xD;&#xA;    xAxis.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.MajorTickMark.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.Title = GetXAxisTitle(dataSet);&#xD;&#xA;    xAxis.TitleForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.TitleFont = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;&#xD;&#xA;    System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;    int numGroups = groupBy.Rows.Count;&#xD;&#xA;&#xD;&#xA;    if (numGroups &gt; 0)&#xD;&#xA;    {&#xD;&#xA;      System.Data.DataRow lastGroupRow = groupBy.Rows[numGroups - 1];&#xD;&#xA;    &#xD;&#xA;      int numberOfDaysInLeapYear = 366;&#xD;&#xA;    &#xD;&#xA;      List&lt;List&lt;double&gt;&gt;[] dailyLists = new List&lt;List&lt;double&gt;&gt;[numberOfDaysInLeapYear];&#xD;&#xA;    &#xD;&#xA;      for (int dayIndex = 0; dayIndex &lt; numberOfDaysInLeapYear; dayIndex++) dailyLists[dayIndex] = new List&lt;List&lt;double&gt;&gt;();&#xD;&#xA;&#xD;&#xA;      DateTimeOffset EarliestHistoricalDataDateTime = DateTimeOffset.MaxValue;&#xD;&#xA;      DateTimeOffset LatestHistoricalDataDateTime = DateTimeOffset.MinValue;&#xD;&#xA;    &#xD;&#xA;      // Find values for historical stats&#xD;&#xA;      int yearCount = 0;&#xD;&#xA;      foreach (System.Data.DataRow groupRow in groupBy.Rows)&#xD;&#xA;      {&#xD;&#xA;        DateTimeOffset groupByTimeStamp = (DateTimeOffset) groupRow[&quot;StartTime&quot;];&#xD;&#xA;    &#xD;&#xA;        if (groupByTimeStamp &lt; HistoricalStart) continue;&#xD;&#xA;        if (groupByTimeStamp &gt; HistoricalEnd) break;     &#xD;&#xA;      &#xD;&#xA;        for (int i = 0; i &lt; numberOfDaysInLeapYear; i++) dailyLists[i].Add(new List&lt;double&gt;());&#xD;&#xA;&#xD;&#xA;        System.Data.DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByPoints&quot;);  &#xD;&#xA;        foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;        {&#xD;&#xA;          DateTimeOffset time = (DateTimeOffset) groupPoint[&quot;Timestamp&quot;];&#xD;&#xA;          if (DateTime.IsLeapYear(time.Year) &amp;&amp; (time.Month == 2) &amp;&amp; (time.Day == 29)) continue; // ignore Feb 29&#xD;&#xA;&#xD;&#xA;          TimeSpan span = (time - groupByTimeStamp);&#xD;&#xA;          int day = span.Days;&#xD;&#xA;      &#xD;&#xA;          if (DateTime.IsLeapYear(time.Year) &amp;&amp; (time.Month &gt;= 3) &amp;&amp; (time.Month &lt;= 9)) day--;&#xD;&#xA;                  &#xD;&#xA;          object valObj = groupPoint[&quot;Value&quot;];&#xD;&#xA;      &#xD;&#xA;          if (valObj is double)&#xD;&#xA;          {          &#xD;&#xA;            dailyLists[day][yearCount].Add((double) valObj);&#xD;&#xA;                          &#xD;&#xA;            if (time &lt; EarliestHistoricalDataDateTime) EarliestHistoricalDataDateTime = time;&#xD;&#xA;            if (time &gt; LatestHistoricalDataDateTime) LatestHistoricalDataDateTime = time;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        yearCount++;&#xD;&#xA;      }&#xD;&#xA;  &#xD;&#xA;      string MinMaxName = &quot;Range of Min &amp; Max&quot;;&#xD;&#xA;      if (EarliestHistoricalDataDateTime &lt; DateTimeOffset.MaxValue)&#xD;&#xA;      {&#xD;&#xA;        MinMaxName += &quot; (&quot; + EarliestHistoricalDataDateTime.ToString(&quot;MMM dd, yyyy&quot;) + &#xD;&#xA;          &quot; - &quot; + LatestHistoricalDataDateTime.ToString(&quot;MMM dd, yyyy&quot;) + &quot;)&quot;;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      Series historicalMinMax = new Series(MinMaxName);&#xD;&#xA;      Series historicalQuartile = new Series(&quot;Historical 25-75&quot;);&#xD;&#xA;      Series historicalMedian = new Series(&quot;Historical Daily Median&quot;);&#xD;&#xA;  &#xD;&#xA;      if ((EarliestHistoricalDataDateTime &lt; DateTimeOffset.MaxValue) &amp;&amp; &#xD;&#xA;        (LatestHistoricalDataDateTime - EarliestHistoricalDataDateTime).TotalDays &gt;= 730)&#xD;&#xA;      {&#xD;&#xA;        microsoftChart1.Series.Add(historicalMinMax);&#xD;&#xA;        microsoftChart1.Series.Add(historicalMedian);&#xD;&#xA;      }&#xD;&#xA;  &#xD;&#xA;      string currentYearRawName = &quot;Raw Data&quot;;&#xD;&#xA;      Series seriesCurrentYearRaw = microsoftChart1.Series.Add(currentYearRawName);&#xD;&#xA;    &#xD;&#xA;      string currentYearApprovedName = &quot;Approved Data&quot;;&#xD;&#xA;      Series seriesCurrentYearApproved = microsoftChart1.Series.Add(currentYearApprovedName);&#xD;&#xA;&#xD;&#xA;      double FirstDayOnChart = (new DateTime(ChartYear - 1, 10, 1)).ToOADate();&#xD;&#xA;      for (int dayIndex = 0; dayIndex &lt; numberOfDaysInLeapYear; dayIndex++)&#xD;&#xA;      {&#xD;&#xA;        double day = FirstDayOnChart + dayIndex;&#xD;&#xA;&#xD;&#xA;        double median = GetQuartileForDay(Median, dayIndex, dailyLists);&#xD;&#xA;&#xD;&#xA;        historicalMedian.Points.AddXY(day, median);&#xD;&#xA;  &#xD;&#xA;        double min = GetMinForDay(dayIndex, dailyLists);&#xD;&#xA;        double max = GetMaxForDay(dayIndex, dailyLists);&#xD;&#xA;      &#xD;&#xA;        if (!double.IsNaN(min) &amp;&amp; !double.IsNaN(max))&#xD;&#xA;        {&#xD;&#xA;          double [] yvals = new double[2];&#xD;&#xA;          yvals[0] = min;&#xD;&#xA;          yvals[1] = max;&#xD;&#xA;&#xD;&#xA;          DataPoint pt = new DataPoint();&#xD;&#xA;          pt.XValue = day;&#xD;&#xA;          pt.YValues = yvals;&#xD;&#xA;    &#xD;&#xA;          historicalMinMax.Points.Add(pt);&#xD;&#xA;        }&#xD;&#xA;      &#xD;&#xA;        double quartile25 = GetQuartileForDay(Quartile25, dayIndex, dailyLists);&#xD;&#xA;        double quartile75 = GetQuartileForDay(Quartile75, dayIndex, dailyLists);&#xD;&#xA;&#xD;&#xA;        if (!double.IsNaN(quartile25) &amp;&amp; !double.IsNaN(quartile75))&#xD;&#xA;        {&#xD;&#xA;          double [] yvals = new double[2];&#xD;&#xA;&#xD;&#xA;          yvals[0] = quartile25;&#xD;&#xA;          yvals[1] = quartile75;&#xD;&#xA;&#xD;&#xA;          DataPoint pt = new DataPoint();&#xD;&#xA;          pt.XValue = day;&#xD;&#xA;          pt.YValues = yvals;&#xD;&#xA;    &#xD;&#xA;          historicalQuartile.Points.Add(pt);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      foreach (System.Data.DataRow groupPoint in lastGroupRow.GetChildRows(&quot;GroupByPoints&quot;))&#xD;&#xA;      {      &#xD;&#xA;        string approvalLevel = &quot;&quot;;&#xD;&#xA;        var approvalObj = groupPoint[&quot;ApprovalLevel&quot;];&#xD;&#xA;        if (approvalObj is string) approvalLevel = (string) approvalObj;&#xD;&#xA;    &#xD;&#xA;        if (approvalLevel == &quot;Approved&quot;)&#xD;&#xA;        {&#xD;&#xA;          AddDataPoint(seriesCurrentYearApproved, groupPoint);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;          AddDataPoint(seriesCurrentYearRaw, groupPoint);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      historicalMinMax.Color = System.Drawing.Color.FromArgb(150, System.Drawing.Color.LightSkyBlue);&#xD;&#xA;      historicalMinMax.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;    &#xD;&#xA;      historicalQuartile.Color = System.Drawing.Color.FromArgb(100, System.Drawing.Color.HotPink);&#xD;&#xA;      historicalQuartile.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;&#xD;&#xA;      historicalMedian.Color = System.Drawing.Color.FromArgb(65, 171, 93); // green #41ab5d = 65, 171, 93&#xD;&#xA;&#xD;&#xA;      seriesCurrentYearApproved.Color = System.Drawing.Color.FromArgb(12, 44, 132); // blue #0c2c84 = 12, 44, 132&#xD;&#xA;      seriesCurrentYearRaw.Color = System.Drawing.Color.FromArgb(227, 26, 28);   // red #e31a1c = 227, 26, 28&#xD;&#xA;  &#xD;&#xA;      foreach (Series series in microsoftChart1.Series)&#xD;&#xA;      {&#xD;&#xA;        if (series.ChartType == SeriesChartType.RangeColumn)&#xD;&#xA;        {&#xD;&#xA;          series[&quot;PointWidth&quot;] = &quot;1&quot;;&#xD;&#xA;          series[&quot;DrawSideBySide&quot;] = &quot;false&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {   &#xD;&#xA;          series.ChartType = SeriesChartType.Line;&#xD;&#xA;          series.BorderWidth = 6;&#xD;&#xA;          series.MarkerStyle = MarkerStyle.None;&#xD;&#xA;          series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;          series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        series.XValueType = ChartValueType.DateTime;&#xD;&#xA;        series.XAxisType = AxisType.Secondary;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    // Status is Inactive&#xD;&#xA;  &#xD;&#xA;    xAxis.LabelStyle.Format = &quot;yyyy-MMM-d&quot;;&#xD;&#xA;    xAxis.LabelStyle.ForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.LabelStyle.Font = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;    xAxis.IsMarginVisible = false;&#xD;&#xA;    xAxis.MajorGrid.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.MajorTickMark.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;&#xD;&#xA;    Series series = microsoftChart1.Series.Add(&quot;Series1&quot;);&#xD;&#xA;&#xD;&#xA;    series.Color = System.Drawing.Color.FromArgb(12, 44, 132); // blue #0c2c84 = 12, 44, 132&#xD;&#xA;    series.ChartType = SeriesChartType.FastLine;&#xD;&#xA;    series.XValueType = ChartValueType.DateTime;&#xD;&#xA;    series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;    series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;    series.MarkerStyle = MarkerStyle.None;&#xD;&#xA;    series.BorderWidth = 1;&#xD;&#xA;    series.IsVisibleInLegend = false;&#xD;&#xA;    series.XAxisType = AxisType.Secondary;&#xD;&#xA;    &#xD;&#xA;    foreach (System.Data.DataRow row in dataSet.Tables[&quot;Points&quot;].Rows)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset t = (DateTimeOffset) row[&quot;Timestamp&quot;];&#xD;&#xA;      object valObj = row[&quot;Value&quot;];&#xD;&#xA;    &#xD;&#xA;      double v = double.NaN;&#xD;&#xA;      if (valObj is double) v = (double) valObj;&#xD;&#xA;    &#xD;&#xA;      series.Points.AddXY(t.DateTime.ToOADate(), v);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;}&#xD;&#xA;" ScriptLanguage="CSharp" GridStep="18.75" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  CommonLibrary = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, timeSeriesUniqueId);&#xD;&#xA;  &#xD;&#xA;  ///////////////////////////////////////////////////////////////&#xD;&#xA;  &#xD;&#xA;  string GroupBy = &quot;WaterYear&quot;;&#xD;&#xA;  DateTimeOffsetInterval timeseriesTimeRange = (DateTimeOffsetInterval) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;TimeSeriesInterval&quot;];&#xD;&#xA;&#xD;&#xA;  DateTimeOffsetInterval timeRangeToAdjust = new DateTimeOffsetInterval(null, null); // use selected period always &quot;entire record&quot;&#xD;&#xA;  if (!dataSet.Tables.Contains(&quot;GroupBy&quot;))&#xD;&#xA;  {&#xD;&#xA;    GroupByHandler groupByHandler = new GroupByHandler(CommonLibrary);&#xD;&#xA;    System.Data.DataTable groupByTable = groupByHandler.GetGroupByTable(&quot;GroupBy&quot;);&#xD;&#xA;&#xD;&#xA;    timeRangeToAdjust = groupByHandler.GetIntervalOfOverlap(timeRangeToAdjust, timeseriesTimeRange, CommonLibrary.GetReportTimeSpanOffset());&#xD;&#xA;    DateTimeOffsetInterval adjustedInterval = groupByHandler.AdjustIntervalToGroupBy(timeRangeToAdjust, GroupBy);&#xD;&#xA;    &#xD;&#xA;    dataSet.Tables.Add(groupByTable);&#xD;&#xA;    if (adjustedInterval.Start.HasValue &amp;&amp; adjustedInterval.End.HasValue)&#xD;&#xA;    {&#xD;&#xA;      groupByHandler.AddRowsToGroupBy(groupByTable, GroupBy, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;      DataTable pointsTable = new DataTable(&quot;Points&quot;);&#xD;&#xA;      dataSet.Tables.Add(pointsTable);&#xD;&#xA;&#xD;&#xA;      pointsTable.Columns.Add(&quot;WaterYear&quot;, typeof(int));&#xD;&#xA;      pointsTable.Columns.Add(&quot;Timestamp&quot;, typeof(DateTimeOffset));&#xD;&#xA;      pointsTable.Columns.Add(&quot;TimestampDouble&quot;, typeof(double));&#xD;&#xA;      pointsTable.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;      pointsTable.Columns.Add(&quot;ApprovalLevel&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;      dataSet.Relations.Add(&quot;GroupByPoints&quot;, groupByTable.Columns[&quot;WaterYear&quot;], pointsTable.Columns[&quot;WaterYear&quot;]);&#xD;&#xA;     &#xD;&#xA;      if (groupByTable.Rows.Count &gt; 1)&#xD;&#xA;      {&#xD;&#xA;        // do not need approval level for points (if any) that are before the last group&#xD;&#xA;        DataRow lastGroupRow = groupByTable.Rows[groupByTable.Rows.Count - 1];&#xD;&#xA;        &#xD;&#xA;        DateTimeOffset startTime = adjustedInterval.Start.Value;&#xD;&#xA;        DateTimeOffset endTime = ((DateTimeOffset) lastGroupRow[&quot;StartTime&quot;]).AddTicks(-1);&#xD;&#xA;        &#xD;&#xA;        var points = CommonLibrary.GetTimeSeriesPoints(timeSeriesUniqueId, startTime, endTime);&#xD;&#xA;&#xD;&#xA;        foreach (ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint point in points)&#xD;&#xA;        {&#xD;&#xA;          DataRow pointRow = pointsTable.NewRow();&#xD;&#xA;        &#xD;&#xA;          DateTimeOffset timestamp = point.Timestamp;      &#xD;&#xA;          pointRow[&quot;Timestamp&quot;] = timestamp;&#xD;&#xA;          pointRow[&quot;TimestampDouble&quot;] = timestamp.DateTime.ToOADate();&#xD;&#xA;          pointRow[&quot;WaterYear&quot;] = (timestamp.Month &gt;= CommonLibrary.GetWaterYearMonth()) ? timestamp.Year : timestamp.Year - 1;&#xD;&#xA;          pointRow[&quot;Value&quot;] = point.Value.HasValue ? point.Value.Value : double.NaN;&#xD;&#xA;          pointRow[&quot;ApprovalLevel&quot;] = &quot;&quot;;&#xD;&#xA;        &#xD;&#xA;          pointsTable.Rows.Add(pointRow);         &#xD;&#xA;        }  &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      if (groupByTable.Rows.Count &gt; 0)&#xD;&#xA;      {&#xD;&#xA;        DataRow lastGroupRow = groupByTable.Rows[groupByTable.Rows.Count - 1];&#xD;&#xA;        &#xD;&#xA;        // only get approval level for points in the last group&#xD;&#xA;        DateTimeOffset startTime = ((DateTimeOffset) lastGroupRow[&quot;StartTime&quot;]);&#xD;&#xA;        DateTimeOffset endTime = adjustedInterval.End.Value;&#xD;&#xA;&#xD;&#xA;        TimeSeriesDataResponse response = CommonLibrary.GetTimeSeriesDataResponse(timeSeriesUniqueId, startTime, endTime);&#xD;&#xA;        List&lt;string&gt; approvalLevelNames = GetTimeSeriesPointsApprovalLevelNames(response.Points, response.Metadata.Approvals);&#xD;&#xA;&#xD;&#xA;        for (int i = 0; i &lt; response.Points.Count; i++)&#xD;&#xA;        {&#xD;&#xA;          ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint point = response.Points[i];&#xD;&#xA;          DataRow pointRow = pointsTable.NewRow();&#xD;&#xA;        &#xD;&#xA;          DateTimeOffset timestamp = point.Timestamp;      &#xD;&#xA;          pointRow[&quot;Timestamp&quot;] = timestamp;&#xD;&#xA;          pointRow[&quot;TimestampDouble&quot;] = timestamp.DateTime.ToOADate();&#xD;&#xA;          pointRow[&quot;WaterYear&quot;] = (timestamp.Month &gt;= CommonLibrary.GetWaterYearMonth()) ? timestamp.Year : timestamp.Year - 1;&#xD;&#xA;          pointRow[&quot;Value&quot;] = point.Value.HasValue ? point.Value.Value : double.NaN;&#xD;&#xA;          pointRow[&quot;ApprovalLevel&quot;] = approvalLevelNames[i];&#xD;&#xA;        &#xD;&#xA;          pointsTable.Rows.Add(pointRow);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  InitReportVariables(dataSet);&#xD;&#xA; &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="75; 75; 150; 150" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;75" Name="pageHeader" Size="3300;581.25"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="112.5;0" Size="3037.5;112.5" Name="textBoxPageHeader1" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="GetData(&quot;ReportTables.ReportData.PageHeader1&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="15" value="Aquatic Informatics Data Management Software" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="16" Size="12" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="17" Location="112.5;75" Size="3037.5;75" Name="textBoxPageHeader2" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="18" Color="0, 131, 215" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="19"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="20" Expression="GetData(&quot;ReportTables.ReportData.PageHeader2&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="21" value="Faster Analysis. Better Decisions." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="22" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="23" Location="150;31.25" Size="643.75;187.5" SizeMode="Uniform" Name="logo" StyleName="PageHeader" GenerateScript="var encodedImage = GetData(&quot;ReportTables.OrganizationIcon.EncodedImage&quot;) as string;&#xD;&#xA;var bytes = Convert.FromBase64String(encodedImage);&#xD;&#xA;&#xD;&#xA;using (var memoryStream = new System.IO.MemoryStream(bytes))&#xD;&#xA;{&#xD;&#xA;  logo.Image = new System.Drawing.Bitmap(&#xD;&#xA;    System.Drawing.Image.FromStream(memoryStream));&#xD;&#xA;}" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="GetData(&quot;ReportTables.OrganizationIcon.SupportUrl&quot;)" PropertyName="Hyperlink" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="0;281.25" Size="3300;118.11023712158203" Name="textBoxPageHeaderLine" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="29" Location="150;300" Size="1500;75" Name="reportTitle" StyleName="PageHeader" GenerateScript="reportTitle.Document.Title = ReportTitle;" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="30" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="31"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="32" Expression="ReportTitle" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="33" value="Wind Rose" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="34" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="35" Location="150;356.25" Size="1500;56.25" Name="textBoxSubTitle" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="36" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="37"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="38" Expression="GetData(&quot;ReportTables.ReportData.ReportSubTitle&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="39" value="Title" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="40" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="41" Location="2418.75;300" Size="731.25;75" Name="textBoxPageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="42" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="43"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="44" Expression="Now.ToString(&quot;MMM d, yyyy&quot;) + &quot; | &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="45" value="DISCLAIMER: The accuracy and reliability of this data is not guaranteed. Aquatic Informatics Inc. accepts no liability for its use in any way. It is the responsibility of the reader to establish the suitability of the information provided in this report for any purpose. No warranty expressed or implied is made regarding the accuracy, completeness, currency, relevance or suitability for any particular purpose of the information provided in this report." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="46" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="47" Location="1668.75;356.25" Size="1481.25;56.25" Name="textBoxPeriodSelected" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="48" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="49" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="50" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="51" Location="0;431.25" Size="3300;112.5" Name="textBoxGrayBackground" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="52" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="53" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="54" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="55" Location="150;431.25" Size="2606.25;56.25" Name="textBoxInformation1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="56" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="57"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="58" Expression="Resources.SourceData + &quot;: &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesIdentifier&quot;).ToString() + &#xD;&#xA;&quot;, &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="59" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="60" Location="150;468.75" Size="2981.25;56.25" Name="textBoxInformation2" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="61" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="62"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="63" Expression="&quot;Location: &quot; + GetData(&quot;ReportTables.SourceDataLocation.LocationName&quot;) + &quot;, &quot; +&#xD;&#xA;  GetData(&quot;ReportTables.SourceDataLocation.LocationExtraInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="64" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="65" Location="2737.5;431.25" Size="393.75;56.25" Name="textBoxUnitInformation" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="66" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="67"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="68" Expression="GetData(&quot;ReportTables.SourceData.UnitInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="69" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="70" Location="0;712.5" Size="3300;1481.25" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="71" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="72"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="73" Location="150;0" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="3000;1443.75" BorderlineWidth="2" BackColor="WhiteSmoke" StyleName="Normal" GenerateScript="if (!Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;Log.Debug(&quot;Begin Chart GenerateScript&quot;);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{  &#xD;&#xA;  DataSet dataSet = (DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;&#xD;&#xA;  DrawChart(microsoftChart1, dataSet);&#xD;&#xA;  &#xD;&#xA;} catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  Log.Error(&quot;Chart GenerateScript&quot;, exp);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;End Chart GenerateScript&quot;);&#xD;&#xA;" Name="microsoftChart1"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="74"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="75" Name="ChartArea1" BorderColor="Transparent" BackColor="White" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="76" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="77" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="78" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="79" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="80" Name="Secondary X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="81" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="82" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="83" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="84" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="85" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="86" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="87" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="88" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="89" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="90" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="91" Name="Secondary Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="92" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="93" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="94" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="95" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="96" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="97" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="98" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="99" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="100" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="101" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="102" Name="X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="103" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="104" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DimGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="105" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="106" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="107" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="108" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="109" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="110" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="111" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DimGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="112" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="113" Name="Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="114" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="115" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="116" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="117" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="118" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="119" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="120" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="121" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="122" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="123" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="124" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="125" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="126"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="127" IsTextAutoFit="false" Font="Calibri, 8.25pt" Docking="Bottom" BackImage="" ForeColor="51, 51, 51" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="128" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="129" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="130" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="131"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Title" id="132" Name="Title1" ForeColor="51, 51, 51" Font="Calibri, 9.75pt" BackImage=""><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="133" /></Item></Titles><PaletteCustomColors type="System.Drawing.Color[]" id="134" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="135" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="136" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="137"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Series" id="138" MarkerStyle="Circle" Name="Series1" BackGradientStyle="None" LabelFormat="" BorderWidth="5" YValueMembers="Value" Legend="Legend1" MarkerColor="Yellow" ChartTypeName="Line" BackHatchStyle="None" BorderColor="" XValueMember="TimeStampDouble" BackImageTransparentColor="" MarkerBorderColor="Blue" IsVisibleInLegend="true" Font="Microsoft Sans Serif, 8pt" MarkerBorderWidth="3" BackSecondaryColor="" MarkerImageTransparentColor="" Color="ForestGreen" LegendText="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" XValueType="DateTime" MarkerImage="" Label="" BackImage="" MarkerSize="8" LabelBorderWidth="1" LabelBorderDashStyle="Solid" BackImageWrapMode="Tile" ChartArea="ChartArea1" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0" ChartType="Line"><MyCustomProperties type="PerpetuumSoft.Reporting.MSChart.ChartModel.Design.CustomPropertiesExtender" id="139" /><SmartLabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.SmartLabelStyle" id="140" /><EmptyPointStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.DataPointCustomProperties" id="141" MarkerStyle="None" Label="" LabelBorderWidth="1" BackGradientStyle="None" LabelFormat="" ToolTip="" MarkerImageTransparentColor="" MarkerImage="" BackHatchStyle="None" BorderColor="" LegendText="" MarkerColor="" BackImageTransparentColor="" MarkerBorderColor="" IsVisibleInLegend="true" MarkerBorderWidth="1" Font="Microsoft Sans Serif, 8pt" BackSecondaryColor="" Color="Transparent" AxisLabel="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" LabelToolTip="" BorderWidth="0" MarkerSize="5" BackImageWrapMode="Tile" BackImage="" LabelBorderDashStyle="Solid" LegendToolTip="" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0"><CustomPropertiesExtended type="System.Windows.Forms.DataVisualization.Charting.CustomProperties" id="142" /></EmptyPointStyle><Points type="System.Windows.Forms.DataVisualization.Charting.DataPointCollection" id="143" /></Item></Series><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="144" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="145" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="146" Location="0;2250" Size="3300;168.75" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="147" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="148"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="149" Location="0;0" Size="3300;168.75" Name="textBox7" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="150" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="53" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="151" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="152" Location="150;0" Size="1950;56.25" Name="textBox8" Text="The statistics (median/min/max) are based on the previous 10 years of available data prior to the current Water Year" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="153" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="154" /><RawValue type="System.String" id="155" value="The statistics (median/min/max) are based on the previous 10 years of available data prior to the current Water Year" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="156" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="157" Location="150;56.25" Size="1950;56.25" Name="textBox3" Text="The statistics (median/min/max) are only displayed for wells with at least two years of data" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="158" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="159" /><RawValue type="System.String" id="160" value="The statistics (median/min/max) are only displayed for wells with at least two years of data" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="161" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="162" Location="150;112.5" Size="1950;56.25" Name="textBox6" Text="The Groundwater Level Statistics Chart is only available for Active Wells" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="163" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="164" /><RawValue type="System.String" id="165" value="The Groundwater Level Statistics Chart is only available for Active Wells" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="166" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="167" Location="2100;0" Size="1050;56.25" Name="textBox4" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="168" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="169"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="170" Expression="&quot;Data last appended: &quot; + &#xD;&#xA;  ((((DateTimeOffsetInterval)GetData(&quot;ReportTables.SourceData.TimeSeriesInterval&quot;)).End.HasValue)?&#xD;&#xA;  ((DateTimeOffsetInterval) GetData(&quot;ReportTables.SourceData.TimeSeriesInterval&quot;)).End.Value.ToString(&quot;MMMM d, yyyy HH:mm&quot;) : &quot;No data&quot;)&#xD;&#xA;  &#xD;&#xA;  + &quot; UTC&quot; + GetData(&quot;ReportTables.SourceData.UtcOffsetString&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="171" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="172" Location="2418.75;112.5" Size="731.25;56.25" Name="textBox5" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="173" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="174"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="175" Expression="&quot;Status: &quot; + ((StatusIsActive) ? &quot;Active&quot; : &quot;Inactive&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="176" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="177" /></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="178" StyleName="PageFooter" Location="0;2475" Name="pageFooter" Size="3300;150"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="179" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="180"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="181" Location="0;0" Size="3300;29.528125762939453" Name="textBoxPageFooterLine" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="182" Color="110, 112, 110" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="183" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="184" Location="168.75;0" Size="2981.25;131.25" CanGrow="true" Name="textBoxPageFooter1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="185" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="186"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="187" Expression="GetData(&quot;ReportTables.ReportData.FooterDisclaimer&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="188" value="DISCLAIMER - AQUARIUS is the leading software suite to acquire, process, model, and publish water data. Environmental monitoring agencies worldwide trust AQUARIUS to produce accurate water information in real-time. A modern design delivers the latest water science in an intuitive experience." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="189" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="190" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="191"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="192"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="193" Name="HeaderFooter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="194" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="195" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="196" Name="HeaderFooter1"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="197" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="198" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="199" Name="HeaderFooter2"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="200" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="201" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="202" Name="HeaderFooter3"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="203" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="204" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="205" Name="Even"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="206" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="207" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="208" Name="Odd"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="209" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="210" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="211" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="212" Name="Normal"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="213" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="214" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="215" Name="TableHeader"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="216" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="217" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="218" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="219" All="1 Solid Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="220" Name="TableCell"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="221" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="222" Size="8" FamilyName="Calibri" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="219" All="1 Solid Silver" /></Item></Styles></StyleSheet></root>