<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="AutomatedSnowWeatherStationGraph" IsTemplate="true" Title="Automated Snow Weather Station Graph" ImportsString="AutomatedSnowWeatherStationGraphNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;ReportPluginFramework.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;PerpetuumSoft.Reporting.MSChart&#xD;&#xA;System.Windows.Forms.DataVisualization.Charting" DocumentGuid="d11d88a9-117c-4eae-a659-ba4d55fa2ecf" MetricUnit="Pixel" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public Common CommonLibrary = null;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public bool BC_Hydro_Logo = false;&#xD;&#xA;public string StatusAttribute = &quot;ReportTables.SourceDataLocationExtendedAttributes.STATUS_SNOW&quot;;&#xD;&#xA;&#xD;&#xA;public DateTimeOffset HistoricalStart = DateTimeOffset.MinValue;&#xD;&#xA;public DateTimeOffset HistoricalEnd = DateTimeOffset.MaxValue;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public bool StatusIsActive = false;&#xD;&#xA;public int ChartYear = 2020;&#xD;&#xA;&#xD;&#xA;void InitReportVariables(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  string status = &quot;INACTIVE&quot;;&#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    status = GetData(StatusAttribute).ToString();&#xD;&#xA;    &#xD;&#xA;    DataTable extendedAttributes = dataSet.Tables[&quot;SourceDataLocationExtendedAttributes&quot;];&#xD;&#xA;    foreach (DataColumn column in extendedAttributes.Columns)&#xD;&#xA;    {&#xD;&#xA;      Log.Info(column.ColumnName);&#xD;&#xA;      if (column.ColumnName.StartsWith(&quot;RESPONSIBILITY&quot;) &amp;&amp; &#xD;&#xA;        extendedAttributes.Rows[0][column.ColumnName].ToString().ToLower().Contains(&quot;bc hydro&quot;))&#xD;&#xA;        BC_Hydro_Logo = true;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;  StatusIsActive = (status.Trim().ToLower() == &quot;active&quot;);&#xD;&#xA;  &#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;    DateTimeOffset lastGroupTime = ((DateTimeOffset) groupBy.Rows[groupBy.Rows.Count - 1][&quot;StartTime&quot;]);&#xD;&#xA;  &#xD;&#xA;//    HistoricalStart = lastGroupTime.AddYears(-10);&#xD;&#xA;    HistoricalEnd = lastGroupTime.AddMilliseconds(-1);&#xD;&#xA;    &#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetXAxisTitle(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  if (!StatusIsActive) return &quot;&quot;;&#xD;&#xA;  &#xD;&#xA;  System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  int numGroups = groupBy.Rows.Count;&#xD;&#xA;  if (numGroups &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow lastGroupRow = groupBy.Rows[numGroups - 1];&#xD;&#xA;    int lastGroupYear = ((DateTimeOffset) lastGroupRow[&quot;StartTime&quot;]).Year;&#xD;&#xA;&#xD;&#xA;    return &quot;Water Year &quot; + lastGroupYear.ToString() + &quot; - &quot; + (lastGroupYear + 1).ToString();&#xD;&#xA;  }&#xD;&#xA;  return &quot;&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public bool MINEXTREMA = true;&#xD;&#xA;public bool MAXEXTREMA = false;&#xD;&#xA;public double GetMinForDay(int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  return GetExtremaForDay(MINEXTREMA, dayIndex, dailyLists);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetMaxForDay(int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  return GetExtremaForDay(MAXEXTREMA, dayIndex, dailyLists);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetExtremaForDay(bool extrema, int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  double extremaForDay = double.NaN;&#xD;&#xA;  int countYear = 0;&#xD;&#xA;&#xD;&#xA;  foreach (List&lt;double&gt; dailyVals in dailyLists[dayIndex])&#xD;&#xA;  {&#xD;&#xA;    int count = 0;&#xD;&#xA;    foreach (double dailyVal in dailyVals)&#xD;&#xA;    {&#xD;&#xA;      if (!double.IsNaN(dailyVal)) count++;&#xD;&#xA;      if (IsExtrema(extrema, dailyVal, extremaForDay)) extremaForDay = dailyVal;&#xD;&#xA;    }&#xD;&#xA;    if (count &gt;= 1) countYear++;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (countYear &gt; 1)&#xD;&#xA;    return extremaForDay;&#xD;&#xA;  else&#xD;&#xA;    return double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool IsExtrema(bool extrema, double dailyVal, double curVal)&#xD;&#xA;{&#xD;&#xA;  if (double.IsNaN(dailyVal)) return false;&#xD;&#xA;  if (double.IsNaN(curVal)) return true;&#xD;&#xA;  if (extrema == MINEXTREMA) return (dailyVal &lt; curVal);&#xD;&#xA;  return (dailyVal &gt; curVal);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double Median = 0.50;&#xD;&#xA;public double Quartile25 = 0.25;&#xD;&#xA;public double Quartile75 = 0.75;&#xD;&#xA;&#xD;&#xA;public double GetQuartileForDay(double quartile, int dayIndex, List&lt;List&lt;double&gt;&gt;[] dailyLists)&#xD;&#xA;{&#xD;&#xA;  List&lt;double&gt; validValuesForDay = new List&lt;double&gt;();&#xD;&#xA; &#xD;&#xA;  foreach (List&lt;double&gt; dailyVals in dailyLists[dayIndex])&#xD;&#xA;  {        &#xD;&#xA;    List&lt;double&gt; validValuesForDayYear = new List&lt;double&gt;();&#xD;&#xA; &#xD;&#xA;    foreach (double dailyVal in dailyVals)&#xD;&#xA;      if (!double.IsNaN(dailyVal)) validValuesForDayYear.Add(dailyVal);&#xD;&#xA;    &#xD;&#xA;    double averageForDayYear = GetAverageFromList(validValuesForDayYear);&#xD;&#xA;    if (!double.IsNaN(averageForDayYear)) validValuesForDay.Add(averageForDayYear);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  double result = GetQuartileFromList(quartile, validValuesForDay);&#xD;&#xA;  &#xD;&#xA;//  log.DebugFormat(&quot;dayIndex = {0}, quartile = {1}, result = {2}&quot;, dayIndex, quartile, result);&#xD;&#xA;  return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetAverageFromList(List&lt;double&gt; validValuesForDayYear)&#xD;&#xA;{&#xD;&#xA;  if (validValuesForDayYear.Count == 0) return double.NaN;&#xD;&#xA;  &#xD;&#xA;  double total = 0.0;&#xD;&#xA;  foreach (double validValue in validValuesForDayYear) total += validValue; &#xD;&#xA;  return total / (double) validValuesForDayYear.Count;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetQuartileFromList(double quartile, List&lt;double&gt; valuesForDay)&#xD;&#xA;{&#xD;&#xA;  int count = valuesForDay.Count; &#xD;&#xA;  if (count &lt; 2) return double.NaN;&#xD;&#xA;  &#xD;&#xA;  valuesForDay.Sort();&#xD;&#xA;  &#xD;&#xA;  double position = (count - 1) * quartile;&#xD;&#xA;  &#xD;&#xA;  int index = (int) Math.Floor(position);&#xD;&#xA;  double remainder = position - index;&#xD;&#xA;  &#xD;&#xA;  if (remainder == 0.0) return valuesForDay[index];&#xD;&#xA;  &#xD;&#xA;  double leftVal = valuesForDay[index];&#xD;&#xA;  double rightVal = valuesForDay[index + 1];&#xD;&#xA;  &#xD;&#xA;  double interpolate = leftVal + ((rightVal - leftVal) * remainder);&#xD;&#xA;  &#xD;&#xA;  return interpolate;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddDataPoint(Series series, System.Data.DataRow groupPoint)&#xD;&#xA;{&#xD;&#xA;  double value = double.NaN;&#xD;&#xA;  if (groupPoint[&quot;Value&quot;] is double) value = (double) groupPoint[&quot;Value&quot;];&#xD;&#xA;    &#xD;&#xA;  var time = (DateTimeOffset) groupPoint[&quot;Timestamp&quot;];&#xD;&#xA;  var yr = ((time.Month &gt;= 10) &amp;&amp; (time.Month &lt;= 12)) ? ChartYear - 1 : ChartYear;&#xD;&#xA;    &#xD;&#xA;  var chartTime = (new DateTime(yr, time.Month, time.Day, time.Hour, time.Minute, time.Second)).ToOADate();&#xD;&#xA;          &#xD;&#xA;  series.Points.AddXY(chartTime, value);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public void DrawChart(MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  // Set all the chart properties and add the series and points&#xD;&#xA;  //&#xD;&#xA;  //&#xD;&#xA;&#xD;&#xA;  // Script to generate all chart series from timeseries dataset&#xD;&#xA;  //&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  microsoftChart1.Legends[0].TextWrapThreshold = 100;&#xD;&#xA;  microsoftChart1.Legends[0].LegendItemOrder = LegendItemOrder.SameAsSeriesOrder;    &#xD;&#xA;  microsoftChart1.Legends[0].LegendStyle = LegendStyle.Row;&#xD;&#xA;  microsoftChart1.Legends[0].Docking = Docking.Bottom;&#xD;&#xA;&#xD;&#xA;  ChartArea chartArea = microsoftChart1.ChartAreas[0];&#xD;&#xA;  Axis xAxis = chartArea.AxisX;&#xD;&#xA;  &#xD;&#xA;  chartArea.AxisY.IsReversed = false;&#xD;&#xA;  chartArea.AxisY.IsStartedFromZero = false;&#xD;&#xA;  chartArea.AxisY.Title = &quot;Snow Water Equivalent (&quot; + GetData(&quot;ReportTables.SourceData.UnitSymbol&quot;).ToString() + &quot;)&quot;;&#xD;&#xA;  chartArea.AxisY.Minimum = 0;&#xD;&#xA;&#xD;&#xA;  if (StatusIsActive)&#xD;&#xA;  {  &#xD;&#xA;    xAxis.LabelStyle.Format = &quot;MMM&quot;;&#xD;&#xA;    xAxis.LabelStyle.ForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.LabelStyle.Font = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;    xAxis.IsMarginVisible = false;&#xD;&#xA;    xAxis.Minimum = (new DateTime(ChartYear - 1, 10, 1)).ToOADate();&#xD;&#xA;    xAxis.Maximum = (new DateTime(ChartYear, 10, 1)).ToOADate();&#xD;&#xA;    xAxis.MajorGrid.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;    xAxis.MajorGrid.Interval = 1.0;&#xD;&#xA;    xAxis.MajorGrid.LineColor = System.Drawing.Color.Silver;&#xD;&#xA;    xAxis.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.MajorTickMark.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.Title = GetXAxisTitle(dataSet);&#xD;&#xA;    xAxis.TitleForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.TitleFont = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;&#xD;&#xA;    System.Data.DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;    int numGroups = groupBy.Rows.Count;&#xD;&#xA;&#xD;&#xA;    if (numGroups &gt; 0)&#xD;&#xA;    {&#xD;&#xA;      System.Data.DataRow lastGroupRow = groupBy.Rows[numGroups - 1];&#xD;&#xA;    &#xD;&#xA;      int numberOfDaysInLeapYear = 366;&#xD;&#xA;    &#xD;&#xA;      List&lt;List&lt;double&gt;&gt;[] dailyLists = new List&lt;List&lt;double&gt;&gt;[numberOfDaysInLeapYear];&#xD;&#xA;    &#xD;&#xA;      for (int dayIndex = 0; dayIndex &lt; numberOfDaysInLeapYear; dayIndex++) dailyLists[dayIndex] = new List&lt;List&lt;double&gt;&gt;();&#xD;&#xA;&#xD;&#xA;      DateTimeOffset EarliestHistoricalDataDateTime = DateTimeOffset.MaxValue;&#xD;&#xA;      DateTimeOffset LatestHistoricalDataDateTime = DateTimeOffset.MinValue;&#xD;&#xA;    &#xD;&#xA;      // Find values for historical stats&#xD;&#xA;      int yearCount = 0;&#xD;&#xA;      foreach (System.Data.DataRow groupRow in groupBy.Rows)&#xD;&#xA;      {&#xD;&#xA;        DateTimeOffset groupByTimeStamp = (DateTimeOffset) groupRow[&quot;StartTime&quot;];&#xD;&#xA;    &#xD;&#xA;        if (groupByTimeStamp &lt; HistoricalStart) continue;&#xD;&#xA;        if (groupByTimeStamp &gt; HistoricalEnd) break;     &#xD;&#xA;      &#xD;&#xA;        for (int i = 0; i &lt; numberOfDaysInLeapYear; i++) dailyLists[i].Add(new List&lt;double&gt;());&#xD;&#xA;&#xD;&#xA;        System.Data.DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByPoints&quot;);  &#xD;&#xA;        foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;        {&#xD;&#xA;          DateTimeOffset time = (DateTimeOffset) groupPoint[&quot;Timestamp&quot;];&#xD;&#xA;          if (DateTime.IsLeapYear(time.Year) &amp;&amp; (time.Month == 2) &amp;&amp; (time.Day == 29)) continue; // ignore Feb 29&#xD;&#xA;&#xD;&#xA;          TimeSpan span = (time - groupByTimeStamp);&#xD;&#xA;          int day = span.Days;&#xD;&#xA;      &#xD;&#xA;          if (DateTime.IsLeapYear(time.Year) &amp;&amp; (time.Month &gt;= 3) &amp;&amp; (time.Month &lt;= 9)) day--;&#xD;&#xA;                  &#xD;&#xA;          object valObj = groupPoint[&quot;Value&quot;];&#xD;&#xA;      &#xD;&#xA;          if (valObj is double)&#xD;&#xA;          {          &#xD;&#xA;            dailyLists[day][yearCount].Add((double) valObj);&#xD;&#xA;                          &#xD;&#xA;            if (time &lt; EarliestHistoricalDataDateTime) EarliestHistoricalDataDateTime = time;&#xD;&#xA;            if (time &gt; LatestHistoricalDataDateTime) LatestHistoricalDataDateTime = time;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        yearCount++;&#xD;&#xA;      }&#xD;&#xA;  &#xD;&#xA;      string MinMaxName = &quot;Range of Min &amp; Max&quot;;&#xD;&#xA;      if (EarliestHistoricalDataDateTime &lt; DateTimeOffset.MaxValue)&#xD;&#xA;      {&#xD;&#xA;        MinMaxName += &quot; (&quot; + EarliestHistoricalDataDateTime.ToString(&quot;MMM dd, yyyy&quot;) + &#xD;&#xA;          &quot; - &quot; + LatestHistoricalDataDateTime.ToString(&quot;MMM dd, yyyy&quot;) + &quot;)&quot;;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      Series historicalMinMax = new Series(MinMaxName);&#xD;&#xA;      Series historicalQuartile = new Series(&quot;Historical 25-75&quot;);&#xD;&#xA;      Series historicalMedian = new Series(&quot;Historical Daily Median&quot;);&#xD;&#xA;  &#xD;&#xA;      if ((EarliestHistoricalDataDateTime &lt; DateTimeOffset.MaxValue) &amp;&amp; &#xD;&#xA;        (LatestHistoricalDataDateTime - EarliestHistoricalDataDateTime).TotalDays &gt;= 730)&#xD;&#xA;      {&#xD;&#xA;        microsoftChart1.Series.Add(historicalMinMax);&#xD;&#xA;        microsoftChart1.Series.Add(historicalQuartile);&#xD;&#xA;        microsoftChart1.Series.Add(historicalMedian);&#xD;&#xA;      }&#xD;&#xA;/*  &#xD;&#xA;      string currentYearRawName = &quot;Raw Data&quot;;&#xD;&#xA;      Series seriesCurrentYearRaw = microsoftChart1.Series.Add(currentYearRawName);&#xD;&#xA;    &#xD;&#xA;      string currentYearApprovedName = &quot;Approved Data&quot;;&#xD;&#xA;      Series seriesCurrentYearApproved = microsoftChart1.Series.Add(currentYearApprovedName);&#xD;&#xA;*/&#xD;&#xA;      double FirstDayOnChart = (new DateTime(ChartYear - 1, 10, 1)).ToOADate();&#xD;&#xA;      for (int dayIndex = 0; dayIndex &lt; numberOfDaysInLeapYear; dayIndex++)&#xD;&#xA;      {&#xD;&#xA;        double day = FirstDayOnChart + dayIndex;&#xD;&#xA;&#xD;&#xA;        double median = GetQuartileForDay(Median, dayIndex, dailyLists);&#xD;&#xA;&#xD;&#xA;        historicalMedian.Points.AddXY(day, median);&#xD;&#xA;  &#xD;&#xA;        double min = GetMinForDay(dayIndex, dailyLists);&#xD;&#xA;        double max = GetMaxForDay(dayIndex, dailyLists);&#xD;&#xA;      &#xD;&#xA;        if (!double.IsNaN(min) &amp;&amp; !double.IsNaN(max))&#xD;&#xA;        {&#xD;&#xA;          double [] yvals = new double[2];&#xD;&#xA;          yvals[0] = min;&#xD;&#xA;          yvals[1] = max;&#xD;&#xA;&#xD;&#xA;          DataPoint pt = new DataPoint();&#xD;&#xA;          pt.XValue = day;&#xD;&#xA;          pt.YValues = yvals;&#xD;&#xA;    &#xD;&#xA;          historicalMinMax.Points.Add(pt);&#xD;&#xA;        }&#xD;&#xA;      &#xD;&#xA;        double quartile25 = GetQuartileForDay(Quartile25, dayIndex, dailyLists);&#xD;&#xA;        double quartile75 = GetQuartileForDay(Quartile75, dayIndex, dailyLists);&#xD;&#xA;&#xD;&#xA;        if (!double.IsNaN(quartile25) &amp;&amp; !double.IsNaN(quartile75))&#xD;&#xA;        {&#xD;&#xA;          double [] yvals = new double[2];&#xD;&#xA;&#xD;&#xA;          yvals[0] = quartile25;&#xD;&#xA;          yvals[1] = quartile75;&#xD;&#xA;&#xD;&#xA;          DataPoint pt = new DataPoint();&#xD;&#xA;          pt.XValue = day;&#xD;&#xA;          pt.YValues = yvals;&#xD;&#xA;    &#xD;&#xA;          historicalQuartile.Points.Add(pt);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;/*    &#xD;&#xA;      foreach (System.Data.DataRow groupPoint in lastGroupRow.GetChildRows(&quot;GroupByPoints&quot;))&#xD;&#xA;      {      &#xD;&#xA;        string approvalLevel = &quot;&quot;;&#xD;&#xA;        var approvalObj = groupPoint[&quot;ApprovalLevel&quot;];&#xD;&#xA;        if (approvalObj is string) approvalLevel = (string) approvalObj;&#xD;&#xA;    &#xD;&#xA;        if (approvalLevel == &quot;Approved&quot;)&#xD;&#xA;        {&#xD;&#xA;          AddDataPoint(seriesCurrentYearApproved, groupPoint);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;          AddDataPoint(seriesCurrentYearRaw, groupPoint);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;*/    &#xD;&#xA;      historicalMinMax.Color = System.Drawing.Color.FromArgb(150, System.Drawing.Color.LightGray);&#xD;&#xA;      historicalMinMax.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;    &#xD;&#xA;      historicalQuartile.Color = System.Drawing.Color.FromArgb(100, System.Drawing.Color.HotPink);&#xD;&#xA;      historicalQuartile.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;&#xD;&#xA;      historicalMedian.Color = System.Drawing.Color.DimGray;&#xD;&#xA;&#xD;&#xA;//      seriesCurrentYearApproved.Color = System.Drawing.Color.FromArgb(12, 44, 132); // blue #0c2c84 = 12, 44, 132&#xD;&#xA;//      seriesCurrentYearRaw.Color = System.Drawing.Color.FromArgb(227, 26, 28);   // red #e31a1c = 227, 26, 28&#xD;&#xA;    &#xD;&#xA;      int lastGroupYear = ((DateTimeOffset) lastGroupRow[&quot;StartTime&quot;]).Year;&#xD;&#xA;      string previousYearName = (lastGroupYear - 1).ToString() + &quot; - &quot; + lastGroupYear.ToString();&#xD;&#xA;      Series seriesPreviousYear = microsoftChart1.Series.Add(previousYearName);&#xD;&#xA;      seriesPreviousYear.Color = System.Drawing.Color.FromArgb(65, 171, 93); // green #41ab5d = 65, 171, 93&#xD;&#xA;    &#xD;&#xA;      string currentYearName = lastGroupYear.ToString() + &quot; - &quot; + (lastGroupYear + 1).ToString();&#xD;&#xA;      Series seriesCurrentYear = microsoftChart1.Series.Add(currentYearName);&#xD;&#xA;      seriesCurrentYear.Color = System.Drawing.Color.FromArgb(12, 44, 132); // blue #0c2c84 = 12, 44, 132&#xD;&#xA;&#xD;&#xA;      foreach (System.Data.DataRow groupPoint in lastGroupRow.GetChildRows(&quot;GroupByPoints&quot;))&#xD;&#xA;        AddDataPoint(seriesCurrentYear, groupPoint);&#xD;&#xA;    &#xD;&#xA;      if (numGroups &gt; 1)&#xD;&#xA;      {&#xD;&#xA;        DataRow [] previousYearPoints = groupBy.Rows[numGroups - 2].GetChildRows(&quot;GroupByPoints&quot;);&#xD;&#xA;        foreach (System.Data.DataRow groupPoint in previousYearPoints)&#xD;&#xA;          AddDataPoint(seriesPreviousYear, groupPoint);&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      foreach (Series series in microsoftChart1.Series)&#xD;&#xA;      {&#xD;&#xA;        if (series.ChartType == SeriesChartType.RangeColumn)&#xD;&#xA;        {&#xD;&#xA;          series[&quot;PointWidth&quot;] = &quot;1&quot;;&#xD;&#xA;          series[&quot;DrawSideBySide&quot;] = &quot;false&quot;;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {   &#xD;&#xA;          series.ChartType = SeriesChartType.Line;&#xD;&#xA;          series.BorderWidth = 6;&#xD;&#xA;          series.MarkerStyle = MarkerStyle.None;&#xD;&#xA;          series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;          series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        series.XValueType = ChartValueType.DateTime;&#xD;&#xA;        series.XAxisType = AxisType.Primary;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    // Status is Inactive&#xD;&#xA;  &#xD;&#xA;    xAxis.LabelStyle.Format = &quot;yyyy-MMM-d&quot;;&#xD;&#xA;    xAxis.LabelStyle.ForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;    xAxis.LabelStyle.Font = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;    xAxis.IsMarginVisible = false;&#xD;&#xA;    xAxis.MajorGrid.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;    xAxis.MajorTickMark.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;&#xD;&#xA;    Series series = microsoftChart1.Series.Add(&quot;Series1&quot;);&#xD;&#xA;&#xD;&#xA;    series.Color = System.Drawing.Color.FromArgb(12, 44, 132); // blue #0c2c84 = 12, 44, 132&#xD;&#xA;    series.ChartType = SeriesChartType.FastLine;&#xD;&#xA;    series.XValueType = ChartValueType.DateTime;&#xD;&#xA;    series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;    series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;    series.MarkerStyle = MarkerStyle.None;&#xD;&#xA;    series.BorderWidth = 1;&#xD;&#xA;    series.IsVisibleInLegend = false;&#xD;&#xA;    series.XAxisType = AxisType.Primary;&#xD;&#xA;    &#xD;&#xA;    foreach (System.Data.DataRow row in dataSet.Tables[&quot;Points&quot;].Rows)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset t = (DateTimeOffset) row[&quot;Timestamp&quot;];&#xD;&#xA;      object valObj = row[&quot;Value&quot;];&#xD;&#xA;    &#xD;&#xA;      double v = double.NaN;&#xD;&#xA;      if (valObj is double) v = (double) valObj;&#xD;&#xA;    &#xD;&#xA;      series.Points.AddXY(t.DateTime.ToOADate(), v);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;}&#xD;&#xA;" ScriptLanguage="CSharp" GridStep="18.75" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  CommonLibrary = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, timeSeriesUniqueId);&#xD;&#xA;  &#xD;&#xA;  ///////////////////////////////////////////////////////////////&#xD;&#xA;  &#xD;&#xA;  string GroupBy = &quot;WaterYear&quot;;&#xD;&#xA;  DateTimeOffsetInterval timeseriesTimeRange = (DateTimeOffsetInterval) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;TimeSeriesInterval&quot;];&#xD;&#xA;&#xD;&#xA;  DateTimeOffsetInterval timeRangeToAdjust = new DateTimeOffsetInterval(null, null); // use selected period always &quot;entire record&quot;&#xD;&#xA;  if (!dataSet.Tables.Contains(&quot;GroupBy&quot;))&#xD;&#xA;  {&#xD;&#xA;    GroupByHandler groupByHandler = new GroupByHandler(CommonLibrary);&#xD;&#xA;    System.Data.DataTable groupByTable = groupByHandler.GetGroupByTable(&quot;GroupBy&quot;);&#xD;&#xA;    &#xD;&#xA;    timeRangeToAdjust = groupByHandler.GetIntervalOfOverlap(timeRangeToAdjust, timeseriesTimeRange, CommonLibrary.GetReportTimeSpanOffset());&#xD;&#xA;    DateTimeOffsetInterval adjustedInterval = groupByHandler.AdjustIntervalToGroupBy(timeRangeToAdjust, GroupBy);&#xD;&#xA;    &#xD;&#xA;    dataSet.Tables.Add(groupByTable);&#xD;&#xA;    if (adjustedInterval.Start.HasValue &amp;&amp; adjustedInterval.End.HasValue)&#xD;&#xA;    {&#xD;&#xA;      groupByHandler.AddRowsToGroupBy(groupByTable, GroupBy, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;      DataTable pointsTable = new DataTable(&quot;Points&quot;);&#xD;&#xA;      dataSet.Tables.Add(pointsTable);&#xD;&#xA;&#xD;&#xA;      pointsTable.Columns.Add(&quot;WaterYear&quot;, typeof(int));&#xD;&#xA;      pointsTable.Columns.Add(&quot;Timestamp&quot;, typeof(DateTimeOffset));&#xD;&#xA;      pointsTable.Columns.Add(&quot;TimestampDouble&quot;, typeof(double));&#xD;&#xA;      pointsTable.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;      pointsTable.Columns.Add(&quot;ApprovalLevel&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;      dataSet.Relations.Add(&quot;GroupByPoints&quot;, groupByTable.Columns[&quot;WaterYear&quot;], pointsTable.Columns[&quot;WaterYear&quot;]);&#xD;&#xA;&#xD;&#xA;      List &lt;TimeAlignedPoint&gt; points = CommonLibrary.GetTimeAlignedPoints(new List&lt;Guid&gt;{timeSeriesUniqueId}, adjustedInterval.Start, adjustedInterval.End);&#xD;&#xA;      &#xD;&#xA;      foreach (TimeAlignedPoint point in points)&#xD;&#xA;      {&#xD;&#xA;        DataRow pointRow = pointsTable.NewRow();&#xD;&#xA;        &#xD;&#xA;        DateTimeOffset timestamp = point.Timestamp;        &#xD;&#xA;        pointRow[&quot;Timestamp&quot;] = timestamp;&#xD;&#xA;        pointRow[&quot;TimestampDouble&quot;] = timestamp.DateTime.ToOADate();&#xD;&#xA;        pointRow[&quot;WaterYear&quot;] = (timestamp.Month &gt;= CommonLibrary.GetWaterYearMonth()) ? timestamp.Year : timestamp.Year - 1;&#xD;&#xA;        pointRow[&quot;Value&quot;] = point.NumericValue1.HasValue ? point.NumericValue1.Value : double.NaN;&#xD;&#xA;        pointRow[&quot;ApprovalLevel&quot;] = point.ApprovalName1;&#xD;&#xA;        &#xD;&#xA;        pointsTable.Rows.Add(pointRow);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  InitReportVariables(dataSet);&#xD;&#xA; &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="75; 75; 150; 150" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;75" Name="pageHeader" Size="3300;581.25"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="112.5;0" Size="3037.5;112.5" Name="textBoxPageHeader1" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="GetData(&quot;ReportTables.ReportData.PageHeader1&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="15" value="Aquatic Informatics Data Management Software" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="16" Size="12" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="17" Location="112.5;75" Size="3037.5;75" Name="textBoxPageHeader2" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="18" Color="0, 131, 215" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="19"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="20" Expression="GetData(&quot;ReportTables.ReportData.PageHeader2&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="21" value="Faster Analysis. Better Decisions." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="22" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="23" Location="150;31.25" Size="643.75;187.5" SizeMode="Uniform" Name="logo" StyleName="PageHeader" GenerateScript="var encodedImage = GetData(&quot;ReportTables.OrganizationIcon.EncodedImage&quot;) as string;&#xD;&#xA;var bytes = Convert.FromBase64String(encodedImage);&#xD;&#xA;&#xD;&#xA;using (var memoryStream = new System.IO.MemoryStream(bytes))&#xD;&#xA;{&#xD;&#xA;  logo.Image = new System.Drawing.Bitmap(&#xD;&#xA;    System.Drawing.Image.FromStream(memoryStream));&#xD;&#xA;}" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="GetData(&quot;ReportTables.OrganizationIcon.SupportUrl&quot;)" PropertyName="Hyperlink" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="26" Expression="BC_Hydro_Logo == false" PropertyName="Visible" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="27" Location="0;281.25" Size="3300;118.11023712158203" Name="textBoxPageHeaderLine" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="28" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="29" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="30" Location="150;300" Size="1500;75" Name="reportTitle" StyleName="PageHeader" GenerateScript="reportTitle.Document.Title = ReportTitle;" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="31" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="32"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="33" Expression="ReportTitle" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="34" value="Wind Rose" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="35" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="36" Location="150;356.25" Size="1500;56.25" Name="textBoxSubTitle" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="37" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="38"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="39" Expression="GetData(&quot;ReportTables.ReportData.ReportSubTitle&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="40" value="Title" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="41" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="42" Location="2418.75;300" Size="731.25;75" Name="textBoxPageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="43" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="44"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="45" Expression="Now.ToString(&quot;MMM d, yyyy&quot;) + &quot; | &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="46" value="DISCLAIMER: The accuracy and reliability of this data is not guaranteed. Aquatic Informatics Inc. accepts no liability for its use in any way. It is the responsibility of the reader to establish the suitability of the information provided in this report for any purpose. No warranty expressed or implied is made regarding the accuracy, completeness, currency, relevance or suitability for any particular purpose of the information provided in this report." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="47" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="48" Location="1668.75;356.25" Size="1481.25;56.25" Name="textBoxPeriodSelected" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="49" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="50" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="51" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="52" Location="0;431.25" Size="3300;112.5" Name="textBoxGrayBackground" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="53" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="55" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="56" Location="150;431.25" Size="2606.25;56.25" Name="textBoxInformation1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="57" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="58"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="59" Expression="Resources.SourceData + &quot;: &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesIdentifier&quot;).ToString() + &#xD;&#xA;&quot;, &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="60" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="61" Location="150;468.75" Size="2981.25;56.25" Name="textBoxInformation2" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="62" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="63"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="64" Expression="&quot;Location: &quot; + GetData(&quot;ReportTables.SourceDataLocation.LocationName&quot;) + &quot;, &quot; +&#xD;&#xA;  GetData(&quot;ReportTables.SourceDataLocation.LocationExtraInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="65" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="66" Location="2737.5;431.25" Size="393.75;56.25" Name="textBoxUnitInformation" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="67" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="68"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="69" Expression="GetData(&quot;ReportTables.SourceData.UnitInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="70" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="71" Location="112.5;0" Size="450;225" Name="picture1" ExportAsPictureInXaml="false"><Image type="System.Drawing.Bitmap" id="72"></Image><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="73"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="74" Expression="BC_Hydro_Logo == true" PropertyName="Visible" /></DataBindings></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="75" StyleName="PageFooter" Location="0;2475" Name="pageFooter" Size="3300;150"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="76" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="77"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="78" Location="0;0" Size="3300;29.528125762939453" Name="textBoxPageFooterLine" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="79" Color="110, 112, 110" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="28" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="80" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="81" Location="168.75;0" Size="2981.25;131.25" CanGrow="true" Name="textBoxPageFooter1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="82" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="83"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="84" Expression="GetData(&quot;ReportTables.ReportData.FooterDisclaimer&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="85" value="DISCLAIMER - AQUARIUS is the leading software suite to acquire, process, model, and publish water data. Environmental monitoring agencies worldwide trust AQUARIUS to produce accurate water information in real-time. A modern design delivers the latest water science in an intuitive experience." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="86" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="87" Location="0;712.5" Size="3300;1481.25" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="88" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="89"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="90" Location="150;-0" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="3000;1443.75" BorderlineWidth="2" BackColor="WhiteSmoke" StyleName="Normal" GenerateScript="if (!Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;Log.Debug(&quot;Begin Chart GenerateScript&quot;);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{  &#xD;&#xA;  DataSet dataSet = (DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;&#xD;&#xA;  DrawChart(microsoftChart1, dataSet);&#xD;&#xA;  &#xD;&#xA;} catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  Log.Error(&quot;Chart GenerateScript&quot;, exp);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;End Chart GenerateScript&quot;);&#xD;&#xA;" Name="microsoftChart1"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="91"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="92" Name="ChartArea1" BorderColor="Transparent" BackColor="White" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="93" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="94" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="95" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="96" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="97" Name="Secondary X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="98" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="99" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="100" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="101" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="102" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="103" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="104" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="105" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="106" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="107" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="108" Name="Secondary Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="109" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="110" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="111" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="112" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="113" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="114" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="115" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="116" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="117" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="118" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="119" Name="X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="120" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="121" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DimGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="122" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="123" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="124" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="125" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="126" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="127" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="128" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DimGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="129" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="130" Name="Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="131" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="132" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="133" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="134" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="135" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="136" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="137" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="138" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="139" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="140" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="141" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="142" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="143"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="144" IsTextAutoFit="false" Font="Calibri, 8.25pt" Docking="Bottom" BackImage="" ForeColor="51, 51, 51" LegendItemOrder="ReversedSeriesOrder" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="145" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="146" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="147" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="148"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Title" id="149" Name="Title1" ForeColor="51, 51, 51" Font="Calibri, 9.75pt" BackImage=""><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="150" /></Item></Titles><PaletteCustomColors type="System.Drawing.Color[]" id="151" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="152" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="153" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="154"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Series" id="155" MarkerStyle="Circle" Name="Series1" BackGradientStyle="None" LabelFormat="" BorderWidth="5" YValueMembers="Value" Legend="Legend1" MarkerColor="Yellow" ChartTypeName="Line" BackHatchStyle="None" BorderColor="" XValueMember="TimeStampDouble" BackImageTransparentColor="" MarkerBorderColor="Blue" IsVisibleInLegend="true" Font="Microsoft Sans Serif, 8pt" MarkerBorderWidth="3" BackSecondaryColor="" MarkerImageTransparentColor="" Color="ForestGreen" LegendText="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" XValueType="DateTime" MarkerImage="" Label="" BackImage="" MarkerSize="8" LabelBorderWidth="1" LabelBorderDashStyle="Solid" BackImageWrapMode="Tile" ChartArea="ChartArea1" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0" ChartType="Line"><MyCustomProperties type="PerpetuumSoft.Reporting.MSChart.ChartModel.Design.CustomPropertiesExtender" id="156" /><SmartLabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.SmartLabelStyle" id="157" /><EmptyPointStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.DataPointCustomProperties" id="158" MarkerStyle="None" Label="" LabelBorderWidth="1" BackGradientStyle="None" LabelFormat="" ToolTip="" MarkerImageTransparentColor="" MarkerImage="" BackHatchStyle="None" BorderColor="" LegendText="" MarkerColor="" BackImageTransparentColor="" MarkerBorderColor="" IsVisibleInLegend="true" MarkerBorderWidth="1" Font="Microsoft Sans Serif, 8pt" BackSecondaryColor="" Color="Transparent" AxisLabel="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" LabelToolTip="" BorderWidth="0" MarkerSize="5" BackImageWrapMode="Tile" BackImage="" LabelBorderDashStyle="Solid" LegendToolTip="" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0"><CustomPropertiesExtended type="System.Windows.Forms.DataVisualization.Charting.CustomProperties" id="159" /></EmptyPointStyle><Points type="System.Windows.Forms.DataVisualization.Charting.DataPointCollection" id="160" /></Item></Series><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="161" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="162" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="163" Location="0;2250" Size="3300;168.75" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="164" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="165"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="166" Location="0;0" Size="3300;168.75" Name="textBox7" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="167" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="168" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="169" Location="150;0" Size="1950;56.25" Name="textBox8" Text="Statistics are based on the period of record prior to the current Water Year" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="170" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="171" /><RawValue type="System.String" id="172" value="Statistics are based on the period of record prior to the current Water Year" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="173" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="174" Location="150;56.25" Size="1950;56.25" Name="textBox3" Text="Statistics are only displayed for locations with at least two years of data" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="175" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="176" /><RawValue type="System.String" id="177" value="Statistics are only displayed for locations with at least two years of data" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="178" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="179" Location="150;112.5" Size="1950;56.25" Name="textBox6" Text="Automated Snow Weather Station Graph is only available for Active locations" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="180" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="181" /><RawValue type="System.String" id="182" value="Automated Snow Weather Station Graph is only available for Active locations" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="183" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="184" Location="2100;0" Size="1050;56.25" Name="textBox4" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="185" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="186"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="187" Expression="&quot;Data last appended: &quot; + &#xD;&#xA;  ((((DateTimeOffsetInterval)GetData(&quot;ReportTables.SourceData.TimeSeriesInterval&quot;)).End.HasValue)?&#xD;&#xA;  ((DateTimeOffsetInterval) GetData(&quot;ReportTables.SourceData.TimeSeriesInterval&quot;)).End.Value.ToString(&quot;MMMM d, yyyy HH:mm&quot;) : &quot;No data&quot;)&#xD;&#xA;  &#xD;&#xA;  + &quot; UTC&quot; + GetData(&quot;ReportTables.SourceData.UtcOffsetString&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="188" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="189" Location="2418.75;112.5" Size="731.25;56.25" Name="textBox5" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="190" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="191"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="192" Expression="&quot;Status: &quot; + ((StatusIsActive) ? &quot;Active&quot; : &quot;Inactive&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="193" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="194" /></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="195" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="196"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="197"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="198" Name="HeaderFooter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="199" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="200" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="201" Name="HeaderFooter1"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="202" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="203" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="204" Name="HeaderFooter2"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="205" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="206" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="207" Name="HeaderFooter3"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="208" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="209" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="210" Name="Even"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="211" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="212" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="213" Name="Odd"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="214" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="215" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="216" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="217" Name="Normal"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="218" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="219" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="220" Name="TableHeader"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="221" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="222" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="223" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="224" All="1 Solid Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="225" Name="TableCell"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="226" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="227" Size="8" FamilyName="Calibri" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="224" All="1 Solid Silver" /></Item></Styles></StyleSheet></root>